generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  PROCESSED
  DISPATCHED
  FINISHED
  CANCELED
}

model User {
  id               Int              @id @default(autoincrement())
  name             String
  email            String           @unique
  password         String
  isVerified       Boolean          @default(false)
  verificationCode String?
  phone            String?
  isBlocked        Boolean          @default(false)
  role             UserRole         @default(USER)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
  address          Address[]
  Product          Product[]
  Order            Order[]
  ProductReviews   ProductReviews[]
  Cart             Cart[]
}

model Address {
  id        Int      @id @default(autoincrement())
  address1  String
  address2  String?
  city      String
  postcode  String
  country   String   @default("United Kingdom")
  isActive  Boolean // Used as a flag, At a time one address should be only active
  isDeleted Boolean
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Product {
  id             Int              @id @default(autoincrement())
  name           String
  description    String
  price          Float
  ProductImages  ProductImages[] //A product has manay images
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         Int
  isActive       Boolean          @default(true) // Admin can change it. if it's false, it'll not come in list  
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ProductReviews ProductReviews[] //A product has manay reviews
  orderItems     OrderItems[]
  Cart           Cart[]
}

model ProductImages {
  id        Int      @id @default(autoincrement())
  image     String
  isDefault Boolean
  ProductId Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int
  createdAt DateTime @default(now())
}

model ProductReviews {
  id        Int      @id @default(autoincrement())
  review    String
  rate      Float
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model Order {
  id            Int          @id @default(autoincrement())
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        Int
  orderItems    OrderItems[]
  address       Address      @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId     Int
  coupon        CouponCode?  @relation(fields: [couponCodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  couponCodeId  Int?
  price         Float        @default(0)
  discountPrice Float        @default(0)
  total         Float        @default(0)
  status        OrderStatus  @default(PENDING)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model OrderItems {
  id           Int     @id @default(autoincrement())
  order        Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId      Int
  Product      Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId    Int
  quantity     Int     @default(1)
  productPrice Float // Used to store price per item...
  productTotal Float // Used to store perItem * qty value in perticular order...
}

model CouponCode {
  id                 Int      @id @default(autoincrement())
  code               String
  startDate          DateTime
  endDate            DateTime
  discountPercentage Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  Order              Order[]
}

model Cart {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
}
