# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Address {
  id: Float!
  address1: String!
  address2: String
  city: String!
  postcode: String!
  isActive: Boolean!
  isDeleted: Boolean!
  user: User!
  userId: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: Float!
  name: String!
  email: String!
  password: String!
  isVerified: Boolean!
  verificationCode: String!
  phone: String!
  isBlocked: Boolean!
  role: UserRole
  address: [Address!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum UserRole {
  ADMIN
  USER
}

type GetProfile {
  id: Float!
  name: String!
  email: String!
  isVerified: Boolean!
  verificationCode: String!
  phone: String!
  isBlocked: Boolean!
  role: UserRole
  address: [Address!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LoginResponse {
  access_token: String!
  name: String!
  email: String!
}

type ProductImages {
  id: Int!
  image: String!
  isDefault: Boolean!
  productId: Float!
  createdAt: DateTime!
}

type ProductReviews {
  id: Int!
  review: String!
  rate: Float!
  productId: Float!
  userId: Float!
  createdAt: DateTime!
}

type Product {
  id: ID!
  name: String!
  description: String!
  price: Float!
  ProductImages: [ProductImages!]
  ProductReviews: [ProductReviews!]
  userId: Int!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  reviewsCount: Int
}

type ProductListResponse {
  """List of products"""
  list: [Product!]!

  """Total number of products"""
  total: Int!
}

type Cart {
  userId: Float!
  productId: Float!
  product: Product
  quantity: Float!
  createdAt: DateTime!
}

type CouponCode {
  id: ID!
  code: String!
  startDate: DateTime!
  endDate: DateTime!
  discountPercentage: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrderItems {
  id: ID!
  orderId: Order!
  Product: Product
  productId: Float!
  productPrice: Float!
  productTotal: Float!
  quantity: Float!
}

type Order {
  id: Int!
  userId: User!
  addressId: Address!
  couponCodeId: CouponCode!
  price: Float!
  discountPrice: Float!
  total: Float!
  status: String!
  orderItems: [OrderItems!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrderListResponse {
  """List of orders"""
  list: [Order!]!

  """Total number of orders"""
  total: Int!
}

type Query {
  getProfile: GetProfile!
  getAddressList: [Address!]!
  dashboard: JSONObject!
  getProductList(filters: ProductFilterDTO, pagination: PaginationDTO): ProductListResponse!
  getCartDetails: [Cart!]!
  getOrderHistory(orderFilters: GetOrderHistoryDTO, pagination: PaginationDTO): OrderListResponse!
  getOrderDetailsById(getOrderDetailsById: GetOrderDetailsByIdDTO!): Order!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input ProductFilterDTO {
  """Search term"""
  search: String

  """Filter by ID"""
  id: Int

  """Filter product with minimum price"""
  minPrice: Float

  """Filter product with maximum price"""
  maxPrice: Float

  """Used when user wants his own added product list only"""
  ownProductsOnly: Boolean
}

input PaginationDTO {
  """Number of items per page"""
  limit: Int

  """Page number to retrieve"""
  page: Int
}

input GetOrderHistoryDTO {
  """Filter by ID"""
  id: Int
  status: String

  """Filter order with minimum price"""
  minPrice: Float

  """Filter order with maximum price"""
  maxPrice: Float
  fromDate: String
  toDate: String
}

input GetOrderDetailsByIdDTO {
  id: Float!
}

type Mutation {
  login(login: LoginInput!): LoginResponse!
  createUser(createUserInput: CreateUserInputDTO!): User!
  verifyEmail(verifyEmail: VerifyEmailDTO!): String!
  changePassword(changePassword: ChangePasswordDTO!): String!
  sendForgotPasswordEmail(sendForgotPasswordEmailInput: SendForgotPasswordEmailDTO!): String!
  forgotPassword(forgotpassword: ForgotPasswordDTO!): String!
  editProfile(editProfile: EditProfileDTO!): User!
  createAddress(createAddress: CreateAddressInputDTO!): Address!
  updateAddress(updateAddress: UpdateAddressInputDTO!): Address!
  createProduct(createProduct: CreateProductDTO!): Product!
  addProductReview(addProductReview: ProductReviewsDTO!): String!
  createCoupon(createCoupon: CreateCouponDTO!): String!
  addToCart(addToCart: AddToCartDTO!): String!
  removeItemfromCart(removeItemfromCart: RemoveItemFromDTO!): String!
  placeOrder: String!
  changeOrderStatus(getOrderDetailsById: ChangeOrderStatusDTO!): String!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateUserInputDTO {
  name: String!
  email: String!
  password: String!
  phone: String
}

input VerifyEmailDTO {
  token: String!
}

input ChangePasswordDTO {
  password: String!
  new_password: String!
  confirm_password: String!
}

input SendForgotPasswordEmailDTO {
  email: String!
}

input ForgotPasswordDTO {
  new_password: String!
  confirm_password: String!
  token: String!
}

input EditProfileDTO {
  name: String!
  phone: String
}

input CreateAddressInputDTO {
  address1: String!
  address2: String
  city: String!
  postcode: String!
}

input UpdateAddressInputDTO {
  id: Float!
  address1: String
  address2: String
  city: String
  postcode: String
  isActive: Boolean
  isDeleted: Boolean
}

input CreateProductDTO {
  name: String!
  description: String!
  price: Float!
  image: [String!]!
}

input ProductReviewsDTO {
  review: String!
  rate: Float!
  productId: Int!
}

input CreateCouponDTO {
  code: String!
  startDate: String!
  endDate: String!
  discountPercentage: Float!
}

input AddToCartDTO {
  productId: Float!
  quantity: Float!
}

input RemoveItemFromDTO {
  id: Float!
}

input ChangeOrderStatusDTO {
  id: Float!
  status: String!
}